#!/usr/bin/env python
import cmath
import math
from sympy import factorint
import matplotlib.pyplot as plt
from decimal import Decimal, getcontext

# Set precision (you can adjust this as needed)
getcontext().prec = 10000  # 1000 digits of precision




#RSA 260
newval = 22112825529529666435281085255026230927612089502470015394413748319128822941402001986512729726569746599085900330031400051170742204560859276357953757185954298838958709229238491006703034124620545784566413664540684214361293017694020846391065875914794251435144458199
print(len(str((newval))))
print(Decimal(math.sqrt(newval)))
#4702427620870912047410240705527715786617530615694579720274838264558906417510526209125673953258372932984528676238250629594032898048
#52249195787454578304558230061419064295750340174384219114164869606210071305672513434729710591759699255383651958202784773267032200
print(Decimal(4702427620870912047410240705527715786617530615694579720274838264558906417510526209125673953258372932984528676238250629594032898048//90))
#help = input("l")
def digital_root(number):
    # Convert number to string to handle large numbers
    num_str = str(number)
    # Keep summing until a single digit is achieved
    while len(num_str) > 1:
        num_str = str(sum(int(digit) for digit in num_str))
    return int(num_str)

# Example usage with a very large number
print(f"The digital root of {newval} is: {digital_root(newval)}")
#light = Decimal(newval/9)
#print(light)
#inputs = input("f")

newlim = newval - 49
print(Decimal(newlim))
print(len(str((newlim))))
#varrr = input("k")
newlim = Decimal(newlim//90)
print(newlim)
print(len(str(newlim)))
#varr = input("b")

newvarr = Decimal((newlim*90)+49)
print(newvarr)
#inputss = input("j")


limit = Decimal(newlim)

A224859 = []

#DR7 LD1 = 61
#newval = 1848210397825850670380148517702559371400899745254512521925707445580334710601412527675708297932857843901388104766898429433126419139462696524583464983724651631481888473364151368736236317783587518465017087145416734026424615690611620116380982484120857688483676576094865930188367141388795454378671343386258291687641
#DR1 LD1
#newval = 26507199951735394734498120973736811015297864642115831624674545482293445855043495841191504413349124560193160478146528433707807716865391982823061751419151606849655575049676468644737917071142487312863146816801954812702917123189212728868259282632393834443989482096498000219878377420094983472636679089765013603382322972552204068806061829535529820731640151


#print(sum(int(digit) for digit in str(newval)))
#inpuyt = input("b")

#newlimit=(limit*90)+11
def drLD(x, l, m, z, listvar, primitive):   
  "This is a composite generating function"
  y = Decimal(90*(x*x) - l*x + m)
  p = Decimal(z+(90*(x-1)))
  #print(p)

  if y == limit:
    print(y, limit, p)
    new = input("h")
    #print(factorint(newlimit))
    return
  if Decimal(limit-y) % Decimal(p) == 0:
    print(limit, p, limit*90+19)
    new = input("h")
    #print(factorint(newlimit))

    
    
                
for x in range(52249195787454578304558230061419064295750340174384219114164869606210071305672513434729710591759699255383651958202784773267032200, 1, -1): 

# 49 
    drLD(x, 94, 24, 43, A224859, 49) #43,43
  