import cmath
import math
from multiprocessing import Pool, cpu_count

def mark_composites(n_max, operators_dict):
    marked = [0] * (n_max + 1)
    for k, operators in operators_dict.items():
        for a, l, m, p, q in operators:
            for x in range(1, int((n_max / 90)**0.5) + 2):
                n = a * x**2 - l * x + m
                if 0 <= n <= n_max:
                    marked[n] += 1
                    p_x = p + 90 * (x - 1)
                    q_x = q + 90 * (x - 1)
                    for i in range(1, (n_max - n) // p_x + 1):
                        if n + i * p_x <= n_max:
                            marked[n + i * p_x] += 1
                    for i in range(1, (n_max - n) // q_x + 1):
                        if n + i * q_x <= n_max:
                            marked[n + i * q_x] += 1
    holes = [n for n in range(n_max + 1) if marked[n] == 0]
    return holes, marked

def compute_group_zeta(args):
    k_values, n_max, s, holes = args
    total_zeta = 0
    group_holes = set()
    for k in k_values:
        k_holes = [n for n in holes if (90 * n + k) % 90 == k]
        zeta_k = sum((90 * n + k) ** (-s) for n in k_holes if 90 * n + k > 0)
        total_zeta += 1 / zeta_k if zeta_k != 0 else 0
        group_holes.update(k_holes)
    return total_zeta, len(group_holes)

operators = {
    7: [
        (90, 82, -1, 7, 91), (90, 118, 37, 19, 43), (90, 82, 17, 37, 61),
        (90, 28, 2, 73, 79), (90, 152, 64, 11, 17), (90, 98, 25, 29, 53),
        (90, 62, 9, 47, 71), (90, 8, 0, 83, 89), (90, 118, 35, 13, 49),
        (90, 82, 15, 31, 67), (90, 98, 23, 23, 59), (90, 62, 7, 41, 77)
    ],
    11: [
        (90, 120, 34, 7, 53), (90, 132, 48, 19, 29), (90, 120, 38, 17, 43),
        (90, 90, 11, 13, 77), (90, 78, -1, 11, 91), (90, 108, 32, 31, 41),
        (90, 90, 17, 23, 67), (90, 72, 14, 49, 59), (90, 60, 4, 37, 83),
        (90, 60, 8, 47, 73), (90, 48, 6, 61, 71), (90, 12, 0, 79, 89)
    ],
    13: [
        (90, 76, -1, 13, 91), (90, 94, 18, 19, 67), (90, 94, 24, 37, 49),
        (90, 76, 11, 31, 73), (90, 86, 6, 11, 83), (90, 104, 29, 29, 47),
        (90, 86, 14, 23, 71), (90, 86, 20, 41, 53), (90, 104, 25, 17, 59),
        (90, 14, 0, 77, 89), (90, 94, 10, 7, 79), (90, 76, 15, 43, 61)
    ],
    17: [
        (90, 72, -1, 17, 91), (90, 108, 29, 19, 53), (90, 72, 11, 37, 71),
        (90, 18, 0, 73, 89), (90, 102, 20, 11, 67), (90, 138, 52, 13, 29),
        (90, 102, 28, 31, 47), (90, 48, 3, 49, 83), (90, 78, 8, 23, 79),
        (90, 132, 45, 7, 41), (90, 78, 16, 43, 59), (90, 42, 4, 61, 77)
    ],
    19: [
        (90, 70, -1, 19, 91), (90, 106, 31, 37, 37), (90, 34, 3, 73, 73),
        (90, 110, 27, 11, 59), (90, 110, 33, 29, 41), (90, 56, 6, 47, 77),
        (90, 74, 5, 23, 83), (90, 124, 40, 13, 43), (90, 70, 7, 31, 79),
        (90, 70, 13, 49, 61), (90, 106, 21, 7, 67), (90, 20, 0, 71, 89),
        (90, 74, 15, 53, 53), (90, 146, 59, 17, 17)
    ],

    
    
    23: [
        (90, 66, -1, 23, 91), (90, 84, 10, 19, 77), (90, 84, 18, 37, 59),
        (90, 66, 9, 41, 73), (90, 126, 41, 11, 43), (90, 144, 56, 7, 29),
        (90, 54, 5, 47, 79), (90, 36, 2, 61, 83), (90, 96, 16, 13, 71),
        (90, 96, 24, 31, 53), (90, 114, 33, 17, 49), (90, 24, 0, 67, 89)
    ],
    29: [
        (90, 60, -1, 29, 91), (90, 150, 62, 11, 19), (90, 96, 25, 37, 47),
        (90, 24, 1, 73, 83), (90, 144, 57, 13, 23), (90, 90, 20, 31, 59),
        (90, 90, 22, 41, 49), (90, 36, 3, 67, 77), (90, 156, 67, 7, 17),
        (90, 84, 19, 43, 53), (90, 30, 0, 61, 89), (90, 30, 2, 71, 79)
    ],
    31: [
        (90, 58, -1, 31, 91), (90, 112, 32, 19, 49), (90, 130, 45, 13, 37),
        (90, 40, 4, 67, 73), (90, 158, 69, 11, 11), (90, 122, 41, 29, 29),
        (90, 50, 3, 47, 83), (90, 140, 54, 17, 23), (90, 68, 10, 41, 71),
        (90, 32, 0, 59, 89), (90, 50, 5, 53, 77), (90, 130, 43, 7, 43),
        (90, 58, 9, 61, 61), (90, 22, 1, 79, 79)
    ],
    

    
    37: [
        (90, 52, -1, 37, 91), (90, 88, 13, 19, 73), (90, 92, 11, 11, 77),
        (90, 128, 45, 23, 29), (90, 92, 23, 41, 47), (90, 38, 2, 59, 83),
        (90, 88, 9, 13, 79), (90, 142, 54, 7, 31), (90, 88, 21, 43, 49),
        (90, 52, 7, 61, 67), (90, 92, 15, 17, 71), (90, 38, 0, 53, 89)
    ],
    41: [
        (90, 48, -1, 41, 91), (90, 42, 0, 49, 89), (90, 102, 24, 19, 59),
        (90, 120, 39, 23, 37), (90, 108, 25, 11, 61), (90, 72, 7, 29, 79),
        (90, 90, 22, 43, 47), (90, 150, 62, 13, 17), (90, 78, 12, 31, 71),
        (90, 30, 2, 73, 77), (90, 60, 9, 53, 67), (90, 90, 6, 7, 83)
    ],
    43: [
        (90, 46, -1, 43, 91), (90, 154, 65, 7, 19), (90, 64, 6, 37, 79),
        (90, 46, 5, 61, 73), (90, 116, 32, 11, 53), (90, 134, 49, 17, 29),
        (90, 44, 0, 47, 89), (90, 26, 1, 71, 83), (90, 136, 50, 13, 31),
        (90, 64, 10, 49, 67), (90, 116, 36, 23, 41), (90, 44, 4, 59, 77)
    ],
    47: [
        (90, 42, -1, 47, 91), (90, 78, 5, 19, 83), (90, 132, 46, 11, 37),
        (90, 78, 11, 29, 73), (90, 108, 26, 13, 59), (90, 72, 8, 31, 77),
        (90, 108, 30, 23, 49), (90, 102, 17, 7, 71), (90, 48, 0, 43, 89),
        (90, 102, 23, 17, 61), (90, 48, 4, 53, 79), (90, 72, 12, 41, 67)
    ],
    49: [
        (90, 40, -1, 49, 91), (90, 130, 46, 19, 31), (90, 76, 13, 37, 67),
        (90, 94, 14, 13, 73), (90, 140, 53, 11, 29), (90, 86, 20, 47, 47),
        (90, 14, 0, 83, 83), (90, 104, 27, 23, 53), (90, 50, 0, 41, 89),
        (90, 50, 6, 59, 71), (90, 86, 10, 17, 77), (90, 166, 76, 7, 7),
        (90, 76, 7, 31, 79), (90, 40, 1, 61, 61)
    ],
    53: [
        (90, 36, -1, 53, 91), (90, 144, 57, 17, 19), (90, 54, 0, 37, 89),
        (90, 36, 3, 71, 73), (90, 156, 67, 11, 13), (90, 84, 15, 29, 67),
        (90, 84, 19, 47, 49), (90, 66, 4, 31, 83), (90, 96, 21, 23, 61),
        (90, 96, 25, 41, 43), (90, 114, 28, 7, 59), (90, 24, 1, 77, 79)
    ],
    59: [
        (90, 30, -1, 59, 91), (90, 120, 38, 19, 41), (90, 66, 7, 37, 77),
        (90, 84, 12, 23, 73), (90, 90, 9, 11, 79), (90, 90, 19, 29, 61),
        (90, 126, 39, 7, 47), (90, 54, 3, 43, 83), (90, 114, 31, 13, 53),
        (90, 60, 0, 31, 89), (90, 60, 8, 49, 71), (90, 96, 18, 17, 67)
    ],
    61: [
        (90, 28, -1, 61, 91), (90, 82, 8, 19, 79), (90, 100, 27, 37, 43),
        (90, 100, 15, 7, 73), (90, 98, 16, 11, 71), (90, 62, 0, 29, 89),
        (90, 80, 17, 47, 53), (90, 80, 5, 17, 83), (90, 100, 19, 13, 67),
        (90, 118, 38, 31, 31), (90, 82, 18, 49, 49), (90, 80, 9, 23, 77),
        (90, 28, 1, 67, 67), (90, 44, 4, 41, 41)
    ],
    67: [
        (90, 22, -1, 67, 91), (90, 148, 60, 13, 19), (90, 112, 34, 31, 37),
        (90, 58, 7, 49, 73), (90, 122, 37, 11, 47), (90, 68, 4, 29, 83),
        (90, 122, 39, 17, 41), (90, 68, 12, 53, 59), (90, 32, 2, 71, 77),
        (90, 112, 26, 7, 61), (90, 58, 5, 43, 79), (90, 68, 0, 23, 89)
    ],
    71: [
        (90, 18, -1, 71, 91), (90, 128, 41, 19, 37), (90, 146, 58, 11, 23),
        (90, 74, 8, 29, 77), (90, 74, 14, 47, 59), (90, 56, 3, 41, 83),
        (90, 106, 24, 13, 61), (90, 106, 30, 31, 43), (90, 124, 37, 7, 49),
        (90, 34, 2, 67, 79), (90, 74, 0, 17, 89), (90, 56, 7, 53, 71)
    ],
    73: [
        (90, 16, -1, 73, 91), (90, 124, 41, 19, 37), (90, 146, 58, 11, 23),
        (90, 74, 8, 29, 77), (90, 74, 14, 47, 59), (90, 56, 3, 41, 83),
        (90, 106, 24, 13, 61), (90, 106, 30, 31, 43), (90, 124, 37, 7, 49),
        (90, 34, 2, 67, 79), (90, 74, 0, 17, 89), (90, 56, 7, 53, 71)
    ],
    77: [
        (90, 12, -1, 77, 91), (90, 138, 52, 19, 23), (90, 102, 28, 37, 41),
        (90, 48, 5, 59, 73), (90, 162, 72, 7, 11), (90, 108, 31, 29, 43),
        (90, 72, 13, 47, 61), (90, 18, 0, 79, 83), (90, 78, 0, 13, 89),
        (90, 132, 47, 17, 31), (90, 78, 16, 49, 53), (90, 42, 4, 67, 71)
    ],
    79: [
        (90, 10, -1, 79, 91), (90, 100, 22, 19, 61), (90, 136, 48, 7, 37),
        (90, 64, 8, 43, 73), (90, 80, 0, 11, 89), (90, 80, 12, 29, 71),
        (90, 116, 34, 17, 47), (90, 44, 2, 53, 83), (90, 154, 65, 13, 13),
        (90, 100, 26, 31, 49), (90, 46, 5, 67, 67), (90, 134, 49, 23, 23),
        (90, 64, 10, 41, 59), (90, 28, 0, 71, 71)
    ],
    83: [
        (90, 6, -1, 83, 91), (90, 114, 33, 19, 47), (90, 114, 35, 29, 37),
        (90, 96, 14, 11, 73), (90, 126, 41, 13, 41), (90, 126, 43, 23, 31),
        (90, 54, 5, 49, 77), (90, 54, 7, 59, 67), (90, 84, 0, 7, 89),
        (90, 66, 9, 43, 71), (90, 66, 11, 53, 61), (90, 84, 8, 17, 79)
    ],
    

    
    89: [
        (90, 0, -1, 89, 91), (90, 90, 14, 19, 71), (90, 126, 42, 17, 37),
        (90, 54, 6, 53, 73), (90, 120, 35, 11, 49), (90, 120, 39, 29, 31),
        (90, 66, 10, 47, 67), (90, 84, 5, 13, 83), (90, 114, 34, 23, 43),
        (90, 60, 5, 41, 79), (90, 60, 9, 59, 61), (90, 96, 11, 7, 77)
    ],
    
    
    
    91: [
        (90, 90, 0, 91, 91), (90, 142, 56, 19, 19), (90, 70, 10, 37, 73),
        (90, 128, 43, 11, 41), (90, 92, 21, 29, 59), (90, 110, 32, 23, 47),
        (90, 20, 1, 77, 83), (90, 160, 71, 7, 13), (90, 88, 19, 31, 61),
        (90, 52, 5, 49, 79), (90, 70, 12, 43, 67), (90, 110, 30, 17, 53),
        (90, 38, 4, 71, 71), (90, 2, 0, 89, 89)
    ]
}
if __name__ == '__main__':
    print("Computing NORMALIZED SUM OF RECIPROCALS zeta for full address space with multiprocessing")
    n_max = 100000
    s = 0.5 + 14.134725j
    dr_groups = {
        "DR_1": [1, 10, 19, 28, 37, 46, 55, 64, 73, 82],
        "DR_2": [2, 11, 20, 29, 38, 47, 56, 65, 74, 83],
        "DR_3": [3, 12, 21, 30, 39, 48, 57, 66, 75, 84],
        "DR_4": [4, 13, 22, 31, 40, 49, 58, 67, 76, 85],
        "DR_5": [5, 14, 23, 32, 41, 50, 59, 68, 77, 86],
        "DR_6": [6, 15, 24, 33, 42, 51, 60, 69, 78, 87],
        "DR_7": [7, 16, 25, 34, 43, 52, 61, 70, 79, 88],
        "DR_8": [8, 17, 26, 35, 44, 53, 62, 71, 80, 89],
        "DR_9": [9, 18, 27, 36, 45, 54, 63, 72, 81]
    }
    ld_groups = {
        "LD_0": [10, 20, 30, 40, 50, 60, 70, 80],
        "LD_1": [1, 11, 21, 31, 41, 51, 61, 71, 81],
        "LD_2": [2, 12, 22, 32, 42, 52, 62, 72, 82],
        "LD_3": [3, 13, 23, 33, 43, 53, 63, 73, 83],
        "LD_4": [4, 14, 24, 34, 44, 54, 64, 74, 84],
        "LD_5": [5, 15, 25, 35, 45, 55, 65, 75, 85],
        "LD_6": [6, 16, 26, 36, 46, 56, 66, 76, 86],
        "LD_7": [7, 17, 27, 37, 47, 57, 67, 77, 87],
        "LD_8": [8, 18, 28, 38, 48, 58, 68, 78, 88],
        "LD_9": [9, 19, 29, 39, 49, 59, 69, 79, 89]
    }
    num_cores = cpu_count()
    print(f"Using {num_cores} cores")

    # Compute global holes once
    holes, marked = mark_composites(n_max, operators)

    # DR Groups
    print("\nDR Groups:")
    for dr_name, k_values in dr_groups.items():
        args = (k_values, n_max, s, holes)
        with Pool(processes=num_cores) as pool:
            result = pool.apply(compute_group_zeta, (args,))
        total_zeta, group_holes = result
        print(f"{dr_name}: Holes={group_holes}, Total sum={total_zeta}, |Total sum|={abs(total_zeta):.6f}")

    # LD Groups
    print("\nLD Groups:")
    for ld_name, k_values in ld_groups.items():
        args = (k_values, n_max, s, holes)
        with Pool(processes=num_cores) as pool:
            result = pool.apply(compute_group_zeta, (args,))
        total_zeta, group_holes = result
        print(f"{ld_name}: Holes={group_holes}, Total sum={total_zeta}, |Total sum|={abs(total_zeta):.6f}")

    # Full Sum (89 residues)
    k_values = list(range(1, 90))
    args = (k_values, n_max, s, holes)
    with Pool(processes=num_cores) as pool:
        result = pool.apply(compute_group_zeta, (args,))
    total_zeta, total_holes = result
    normalized_total = total_zeta * (4 / 89)
    print(f"\nFull Sum (89 residues, excluding k=0):")
    print(f"n_max={n_max}, Total Holes={total_holes}, Total sum={total_zeta}, Normalized sum={normalized_total}, |Normalized sum|={abs(normalized_total):.6f}")